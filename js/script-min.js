function go(t){return document.querySelector(t)}function renderElement(t,e,s){new t(e).render(go(s))}class Modal{constructor(t,e){this._id=t,this._title=e,this.modal=null}render(t,e){this.modal=document.createElement("div"),this.modal.classList="modal",this.modal.id=this._id,this.modalHtml(),this.removePrevModal(),t.preventDefault(),e.insertAdjacentElement("afterbegin",this.modal)}modalHtml(){this.modal.innerHTML=`\n            <div class="modal-dialog">\n                <div class="modal-content">\n\n                  <div class="modal-header">\n                  <h4 class="modal-title">${this._title}</h4>\n                  <button type="button" class="close" data-dismiss="modal">&times;</button>\n        </div>\n        <div class="modal-body"></div>\n        </div>\n        </div>\n        `}removePrevModal(){const t=document.querySelectorAll(".modal");1===t.length&&t[0].remove()}}class Form{constructor(t,e){this._id=t,this._form=null,this._formGroup=null,this._data=e||""}render(t){this._form=document.createElement("form"),this._form.id=this._id,this._form.className="needs-validation",this._form.action="post",this.renderFormGroup(this._form),this._form.addEventListener("submit",t=>{t.preventDefault();const e=this.serialize();switch(console.log(e),this._form.id){case"loginForm":addRequest(e).then(t=>{go(".nav-login").hidden="true",go(".btn-add-card").classList.add("d-block"),go(".nav-login").classList.add("d-none"),getCards(t),go(".main-subtitle").classList.add("d-none"),createSearchForm(),this.filterForm(go("#search-form"))}),this._closeModal(),this.remove();break;case"doctorCardForm":const t=go('[name="doctorsList"]'),s=t.options[t.selectedIndex].value;e["status-select"]="open",postCard(e).then(t=>{switch(e.id=t,s){case"Cardiologist":renderElement(VisitCardio,e,".cards-desk");break;case"Dentist":renderElement(VisitDentist,e,".cards-desk");break;case"Therapist":renderElement(VisitTherapist,e,".cards-desk")}}),this._closeModal(),this.remove();break;case"cardUpdateForm":getCardById(this._data.id).then(()=>{putCard(this._data.id,e),document.getElementById(this._data.id).remove(),getCardById(this._data.id).then(t=>{this._data=t,this._data["cardio-select"]?renderElement(VisitCardio,this._data,".cards-desk"):this._data["dentist-select"]?renderElement(VisitDentist,this._data,".cards-desk"):this._data["therapist-select"]&&renderElement(VisitTherapist,this._data,".cards-desk")})}),this._closeModal(),this.remove();break;case"search-form":getFilterCards(e)}}),t.insertAdjacentElement("beforeend",this._form),this._form.insertAdjacentElement("beforeend",this._formGroup)}renderFormGroup(t){this._formGroup=document.createElement("div"),this._formGroup.className="form-group",t.insertAdjacentElement("beforeend",this._formGroup)}serialize(){const t=this._form.querySelectorAll("input:not([type='submit'])"),e=this._form.querySelectorAll("select"),s=[...t].filter(t=>t.value),r=[...e].filter(t=>t.options[t.selectedIndex].value),i={};return s.forEach(t=>{console.log(t),i[t.name]=t.value}),r.forEach(t=>{i[t.name]=t.value}),i}remove(){document.querySelector(".modal").remove()}_closeModal(){let t=document.querySelector(".modal");t.classList.remove("in"),t.setAttribute("aria-hidden","true"),t.style.display="none",go(".modal-backdrop").classList.remove("modal-backdrop"),go("body").classList.remove("modal-open")}filterForm(t){t.classList.add("form-inline","d-flex","justify-content-center")}}class CardioForm extends Form{constructor(t,e){super(t,e),this._visitPurpose=e.title||"",this._description=e.description||"",this._bloodPressure=e.pressure||"",this._weightIndex=e["weight-index"]||"",this._diseases=e.diseases||"",this._age=e.age||"",this._fullName=e["full-name"]||""}render(t){super.render(t);const e=new Input("text","Причина визита","title",`${this._visitPurpose}`),s=new Input("text","Описание","description",`${this._description}`),r=new Select("cardio-select","Выберите доктора:","",["Иванов","Петров","Сидоров"],["Иванов","Петров","Сидоров"]),i=new Select("priority-select","Срочность:","",["Low","Medium","High"],["Низкая","Средняя","Высокая"]),n=new Input("text","Давление","pressure",`${this._bloodPressure}`),o=new Input("number","Индекс тела","weight-index",`${this._weightIndex}`),a=new Input("text","Заболевания","diseases",`${this._diseases}`),d=new Input("number","Возраст","age",`${this._age}`);[new Input("text","ФИО","full-name",`${this._fullName}`),e,s,i,r,n,o,a,d,new Input("submit","","submitCardioForm","Отправить")].forEach(t=>{t.render(this._form)})}}class DentistForm extends Form{constructor(t,e){super(t,e),this._visitPurpose=e.title||"",this._description=e.description||"",this._date=e.date||"",this._fullName=e["full-name"]||""}render(t){super.render(t);const e=new Input("text","Причина визита","title",`${this._visitPurpose}`),s=new Input("text","Описание","description",`${this._description}`),r=new Select("dentist-select","Выберите доктора:","",["Курочкин","Уткин","Лебухин"],["Курочкин","Уткин","Лебухин"]),i=new Select("priority-select","Срочность","",["Low","Medium","High"],["Низкая","Средняя","Высокая"]),n=new Input("date","Выберите дату визита:","date",`${this._date}`);[new Input("text","ФИО","full-name",`${this._fullName}`),e,s,r,i,n,new Input("submit","","submitDentistForm","Отправить")].forEach(t=>{t.render(this._form)})}}class TherapistForm extends Form{constructor(t,e){super(t,e),this._visitPurpose=e.title||"",this._description=e.description||"",this._age=e.age||"",this._fullName=e["full-name"]||""}render(t){super.render(t);const e=new Input("text","Причина визита","title",`${this._visitPurpose}`),s=new Input("text","Описание","description",`${this._description}`),r=new Select("therapist-select","Выберите доктора:","",["Деремешко","Попов","Заракуца"],["Деремешко","Попов","Заракуца"]),i=new Select("priority-select","Срочность","",["Low","Medium","High"],["Низкая","Средняя","Высокая"]),n=new Input("number","Возраст","age",`${this._age}`);[new Input("text","ФИО","full-name",`${this._fullName}`),e,r,i,s,n,new Input("submit","","submitTherapistForm","Отправить")].forEach(t=>{t.render(this._form)})}}class Input{constructor(t,e,s,r,...i){this._type=t,this._placeholder=e,this._name=s,this._value=r,this._input=null,this._classes=i||""}render(t){this._input=document.createElement("input"),this._input.type=this._type,this._input.placeholder=this._placeholder,this._input.name=this._name,this._input.value=this._value,this._input.required=!0,this._input.className=this._classes,"submit"===this._input.type?this._input.className="popup__btn-send btn px-4 py-2 border text-primary text-uppercase":this._input.className="popup__input form-control mb-2",this._classes.length>0&&(this._input.className=this._classes,this._input.required=!1),t.insertAdjacentElement("beforeend",this._input)}}class Select{constructor(t,e,s,r,i,n=[]){this._name=t,this._value=r,this._title=e,this._select=null,this._content=i,this.type=s,this._classes=n}render(t){this._select=document.createElement("select"),this._select.name=this._name,this._select.className="form-control w-75 m-auto",this._select.setAttribute("data-style","btn-info"),this._classes.length>0&&(this._select.className=this._classes);for(let t=0;t<this._value.length;t++){const e=document.createElement("option");e.setAttribute("value",this._value[t]),e.textContent=this._content[t],this._select.insertAdjacentElement("beforeend",e)}const e=document.createElement("option");e.setAttribute("selected","true"),e.setAttribute("hidden","true"),e.textContent=this._title,this._select.insertAdjacentElement("afterbegin",e),t.insertAdjacentElement("beforeend",this._select),"doctorsList"===this._select.name&&this._select.addEventListener("change",t=>{this.doctorsList()})}doctorsList(){const t=this._select.options[this._select.selectedIndex].value,e=document.querySelectorAll("#doctorCardForm");switch(1===e.length&&e[0].remove(),t){case"Cardiologist":new CardioForm("doctorCardForm","").render(go("#cardForm"));break;case"Dentist":new DentistForm("doctorCardForm","").render(go("#cardForm"));break;case"Therapist":new TherapistForm("doctorCardForm","").render(go("#cardForm"))}}}function addRequest(t){return new Promise((e,s)=>{axios.post("login",t,{}).then(t=>{localStorage.setItem("token",JSON.stringify(t.data.token)),axios.defaults.headers.common.Authorization="Bearer "+JSON.parse(localStorage.getItem("token")),console.log(t.data),e(t.data.token)}).catch(t=>{s(t)})})}function getCards(){axios.get("cards").then(t=>{console.log(t.data),showCards(t.data)}).catch(t=>{console.log(t)})}function showCards(t){t.forEach(t=>{t["cardio-select"]?renderElement(VisitCardio,t,".cards-desk"):t["dentist-select"]?renderElement(VisitDentist,t,".cards-desk"):t["therapist-select"]&&renderElement(VisitTherapist,t,".cards-desk")})}function postCard(t){return new Promise((e,s)=>{axios.post("cards",t).then(t=>{e(t.data.id)}).catch(t=>{s(t)})})}function deleteCard(t){return new Promise((e,s)=>{axios({method:"DELETE",url:`cards/${t}`}).then(t=>{e(t)}).catch(t=>{s(t)})}).then(t=>t)}function getCardById(t){return new Promise((e,s)=>{axios({method:"GET",url:`cards/${t}`}).then(t=>{e(t.data)}).catch(t=>{s(t)})}).then(t=>t)}function putCard(t,e){return new Promise((s,r)=>{axios({method:"PUT",url:`cards/${t}`,data:e}).then(t=>{s(t.data)}).catch(t=>{r(t)})})}function getFilterCards(t){return new Promise((e,s)=>{axios.get("cards").then(s=>{JSON.parse(localStorage.getItem("token")),e(s.data);const r=s.data.filter(e=>{let s=!1;for(let r in t){if(console.log("select[key] --\x3e"+t[r]),console.log("card[key] --\x3e"+e[r]),!(t[r]===e[r].toLowerCase()||"all"===t[r]||"Поиск по статусу"===t[r]||"Поиск по срочности"===t[r]||e[r].toLowerCase().indexOf(t[r].toLowerCase())>-1))return!1;s=!0}return s});cleanDesk(),showCards(r)}).catch(t=>{s(t)})})}function cleanDesk(){document.querySelectorAll(".card").forEach(t=>t.remove())}axios.defaults.baseURL="http://cards.danit.com.ua/";class Visit{constructor(t){this._card=null,this._status=t["status-select"]||"open",this._visit=t.title,this._description=t.description,this._priority=t["priority-select"],this._fullName=t["full-name"],this._info=null,this._doctor="",this._id=t.id,this._icon=["icon.png","icon2.png","icon3.png"],this._dataCard={}}render(t){this._card=document.createElement("div"),this._card.classList.add("card","m-4","bg-dark","d-flex","align-self-start","align-self-stretch",`${this._priority.toLowerCase()}-priority`),this._card.id=this._id,this._card.status=this._status,this.addHtml(),t.insertAdjacentElement("afterbegin",this._card),this._card.addEventListener("click",t=>{this.buttonToggler(t),t.target.classList.contains("delete-card")&&deleteCard(this._id).then(()=>{this._card.remove()}),t.target.classList.contains("change-status")&&(this.updateStatus(),getCardById(this._id).then(t=>{t["status-select"]="done",putCard(this._id,t)})),t.target.classList.contains("edit-button")&&getCardById(this._id).then(t=>{this._dataCard=t,console.log(t)})})}buttonToggler(t){const e=t.target.dataset;t.target.classList.contains("show-more")&&("toggle-more"===e.option?(t.target.textContent="Скрыть",e.option="toggle-less"):(t.target.textContent="Показать больше",e.option="toggle-more"))}addHtml(){this._card.innerHTML=`\n       <div class="card-body text-white text-center ${this._status}-card pb-0">\n         <h4 class="card-title"><span class="text-info w-100">Имя пациента: </span>${this._fullName}</h4>\n         <h5 class="card-title"><img class="card-logo mr-2 rounded-circle"><span class="text-success">Доктор: </span>${this._doctor}</h5>\n         <p  class="text-white-50">Причина визита: <span class="text-warning d-block">${this._visit}</span></p>\n         <table class="card-table m-0 m-auto w-100 text-left text-start" >\n            <tbody class="additional-info is-hidden font-weight-normal text-dark p-3" id="additional-info"></tbody>\n         </table>\n         \n       </div>\n       <div class="card-footer p-1">\n         <button class="show-more btn btn-success m-2" data-option="toggle-more">Показать больше</button>\n         <button class="edit-button btn btn-primary m-2 dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" id="dropdownMenuButton" ></button>\n         <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">\n           <button class="dropdown-item update-card" data-option="edit" data-toggle="modal" data-target="#cardUpdateModal">Редактировать</button>\n           <button class="dropdown-item delete-card" data-option="delete">Удалить</button>\n           <button class="dropdown-item change-status" data-option="finished">Закончить</button>\n         </div>\n\n       </div>`}createEditedForm(t,e){if(new Modal("cardUpdateModal","Редактировать карточку визита").render(e,go(".cards")),this._dataCard.id){new t("cardUpdateForm",this._dataCard).render(go(".modal-body"))}else console.log(this._id),console.log(this._dataCard),getCardById(this._id).then(t=>{this._dataCard=t}).then(()=>{new t("cardUpdateForm",this._dataCard).render(go(".modal-body"))})}updateStatus(){const t=this._card.querySelector(".card-body");t.classList.remove(`${this._status}-card`),this._status="done",t.classList.add(`${this._status}-card`)}}class VisitDentist extends Visit{constructor(t){super(t),this._description=t.description,this._doctor=t["dentist-select"],this._date=t.date}render(t){super.render(t),this._card.querySelector(".card-logo").setAttribute("src","img/icon.png"),this._card.addEventListener("click",t=>{t.target.classList.contains("show-more")?this.addDentistHtml():t.target.classList.contains("update-card")&&this.createEditedForm(DentistForm,t)})}addDentistHtml(){const t=this._card.querySelector(".additional-info");t.classList.toggle("is-hidden"),t.innerHTML=`\n            <tr>\n                <th scope="row">Описание: </th>\n                <td>${this._description}</td>\n            </tr>\n            <tr>\n                <th scope="row">Дата приёма: </th>\n                <td>${this._date}</td>\n            </tr>\n        `}}class VisitCardio extends Visit{constructor(t,...e){super(t),this._doctor=t["cardio-select"],this._pressure=t.pressure,this._weightIndex=t["weight-index"],this._diseases=t.diseases,this._age=t.age,this._class=e}render(t){super.render(t),this._card.querySelector(".card-logo").setAttribute("src","img/icon2.png"),this._card.addEventListener("click",t=>{t.target.classList.contains("show-more")?this.addCardioHtml():t.target.classList.contains("update-card")&&this.createEditedForm(CardioForm,t)})}addCardioHtml(){const t=this._card.querySelector(".additional-info");t.classList.toggle("is-hidden"),t.innerHTML=`\n           <tr>\n               <th scope="row">Давление: </th>\n               <td>${this._pressure}</td>\n           </tr>\n           <tr>\n               <th scope="row">Индекс массы тела: </th>\n               <td>${this._weightIndex}</td>\n           </tr>\n           <tr>\n               <th scope="row">Болезни: </th>\n               <td>${this._diseases}</td>\n           </tr>\n           <tr>\n               <th scope="row">Возраст: </th>\n               <td>${this._age}</td>\n           </tr>\n        `}}class VisitTherapist extends Visit{constructor(t){super(t),this._doctor=t["therapist-select"],this._age=t.age,this._description=t.description}render(t){super.render(t),this._card.querySelector(".card-logo").setAttribute("src","img/icon3.png"),this._card.addEventListener("click",t=>{t.target.classList.contains("show-more")?this.addTherapistHtml():t.target.classList.contains("update-card")&&this.createEditedForm(TherapistForm,t)})}addTherapistHtml(){const t=this._card.querySelector(".additional-info");t.classList.toggle("is-hidden"),t.innerHTML=`\n           <tr>\n               <th scope="row">Описание: </th>\n               <td>${this._description}</td>\n           </tr>\n           <tr>\n               <th scope="row">Возраст: </th>\n               <td>${this._age}</td>\n           </tr>\n        `}}let modalCard=new Modal("cardModal","Создать карточку визита"),loginModal=new Modal("loginModal","Авторизация");function createSearchForm(){const t=new Form("search-form");return t.render(go("#filter-section .container")),new Input("search","Поиск по заголовку","title","",["form-control mr-2"]).render(go("#search-form .form-group")),new Select("status-select","Поиск по статусу","submit",["all","open","done"],["Все","Актуальные","Завершенные"],["form-control mr-2"]).render(go("#search-form .form-group")),new Select("priority-select","Поиск по срочности","submit",["all","high","medium","low"],["Все","Высокая","Средняя","Низкая"],["form-control mr-2"]).render(go("#search-form .form-group")),new Input("submit","","search-btn","Поиск").render(go("#search-form .form-group")),t}go(".nav-login").addEventListener("click",t=>{loginModal.render(t,go(".navbar"));const e=new Form("loginForm"),s=new Input("text","Email","email","annettt@gmail.com"),r=new Input("password","Пароль","password","123456"),i=new Input("submit","","button","Войти");e.render(go(".modal-body")),s.render(go(".form-group")),r.render(go(".form-group")),i.render(go(".form-group"))}),go(".nav-card").addEventListener("click",t=>{modalCard.render(t,go(".cards"));const e=new Form("cardForm"),s=new Select("doctorsList","Виберите доктора","submit",["Cardiologist","Dentist","Therapist"],["Кардиолог","Стоматолог","Терапевт"]);e.render(go(".modal-body")),s.render(go(".form-group"))});